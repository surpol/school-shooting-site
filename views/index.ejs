<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta Tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Shootings Data & Charts</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js CDN for creating charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- SQL.js CDN for in-browser database -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/sql-wasm.js"></script>
    <!-- Google Trends Script (Load Once) -->
    <script src="https://ssl.gstatic.com/trends_nrtr/3826_RC01/embed_loader.js"></script>


</head>
<body class="bg-gray-100">
    <!-- Header -->
    <header class="bg-white shadow">
        <div class="container mx-auto px-4 py-6">
            <h1 class="text-3xl font-bold text-center">USA School Shootings Data & Charts</h1>
            <p class="text-center text-sm text-gray-600 mt-2">
                Data source:
                <a href="https://en.wikipedia.org/wiki/Lists_of_school_shootings_in_the_United_States" target="_blank" class="text-blue-500 underline">
                    Wikipedia
                </a>
            </p>
        </div>
    </header>
    <div class="container mx-auto">
        <!-- Three-column layout: -->
        <div class="grid grid-cols-1 md:grid-cols-12 gap-4">
            <!-- Filters Sidebar -->
            <aside class="md:col-span-2 hidden md:block mt-4">
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4">Filters</h2>
                    <!-- Year Filter -->
                    <div class="mb-4">
                        <label for="filter-year" class="block text-sm font-medium text-gray-700">Year</label>
                        <select id="filter-year" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="all">All years</option>
                            <!-- Options populated dynamically -->
                        </select>
                    </div>
                    <!-- State Filter -->
                    <div class="mb-4">
                        <label for="filter-state" class="block text-sm font-medium text-gray-700">State</label>
                        <select id="filter-state" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="all">All states</option>
                            <!-- Options populated dynamically -->
                        </select>
                    </div>
                    <!-- Sort Options -->
                    <div class="mb-4">
                        <label for="sort-date-select" class="block text-sm font-medium text-gray-700">Sort by Date</label>
                        <select id="sort-date-select" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="latest">Recent</option>
                            <option value="oldest">Older</option>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="flex items-center text-sm text-gray-700">
                            <input type="checkbox" id="sort-deaths-checkbox" class="mr-2 focus:ring-blue-500" />
                            Sort by Total Deaths
                        </label>
                    </div>
                </div>
            </aside>

            <!-- Data Table -->
            <section class="md:col-span-7 mt-4">
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <h2 id="total-count" class="text-lg font-medium text-gray-700 mb-4"></h2>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700">Date</th>
                                    <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700">Location</th>
                                    <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700">Deaths</th>
                                    <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700">Injuries</th>
                                    <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700">Description</th>
                                </tr>
                            </thead>
                            <tbody id="data-table" class="divide-y divide-gray-200">
                                <!-- Rows populated dynamically -->
                            </tbody>
                        </table>
                    </div>
                    <!-- Show More/Show Less Button -->
                    <div class="mt-4 flex justify-center">
                        <button id="show-more-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            Show more
                        </button>
                    </div>
                </div>
            </section>

            <!-- Charts and Trends -->
            <aside class="md:col-span-3">
                <div class="space-y-6">
                    <!-- Data Visuals -->
                    <div class="bg-white p-4 rounded-lg shadow-md mt-4">
                        <h2 class="text-xl font-semibold mb-4">Data Visuals</h2>
                        <canvas id="deathsTrendChart" class="clickable-chart cursor-pointer"></canvas>
                        <canvas id="deathsByStateChart" class="clickable-chart cursor-pointer"></canvas>
                    </div>
                    <!-- Google Trends -->
                    <div class="bg-white p-4 rounded-lg shadow-md">
                        <h2 class="text-xl font-semibold mb-4">Search Trends</h2>
                        <div id="trends-widget-container" class="mb-4"></div>
                        <div id="trends-widget-container-2"></div>
                    </div>
                </div>
            </aside>

            <!-- Chart Modal -->
            <div id="chart-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
                <div class="bg-white p-6 w-11/12 max-w-3xl md:max-w-screen-md lg:max-w-screen-lg rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-2">Chart View</h2>
                    <canvas id="modalChart"></canvas>
                    <div class="flex justify-end mt-6">
                        <button id="close-chart-modal" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Floating Filters Button for Mobile -->
        <button id="open-filters-btn" class="fixed bottom-4 right-4 p-3 bg-blue-500 text-white md:hidden">
            Filters
        </button>

        <!-- Filters Modal for Mobile -->
        <div id="filters-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
            <div class="bg-white p-6 w-11/12 max-w-md rounded-lg shadow-lg">
                <h2 class="text-xl font-semibold mb-4">Filters</h2>
                <!-- Filter Controls -->
                <!-- Year Filter -->
                <div class="mb-4">
                    <label for="filter-year-modal" class="block text-sm font-medium text-gray-700">Year</label>
                    <select id="filter-year-modal" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <option value="all">All years</option>
                    </select>
                </div>
                <!-- State Filter -->
                <div class="mb-4">
                    <label for="filter-state-modal" class="block text-sm font-medium text-gray-700">State</label>
                    <select id="filter-state-modal" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <option value="all">All states</option>
                    </select>
                </div>
                <!-- Sort Options -->
                <div class="mb-4">
                    <label for="sort-date-select-modal" class="block text-sm font-medium text-gray-700">Sort by Date</label>
                    <select id="sort-date-select-modal" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <option value="latest">Recent</option>
                        <option value="oldest">Older</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="flex items-center text-sm text-gray-700">
                        <input type="checkbox" id="sort-deaths-checkbox-modal" class="mr-2 focus:ring-blue-500" />
                        Sort by Death Count
                    </label>
                </div>
                <!-- Modal Buttons -->
                <div class="flex justify-end mt-6">
                    <button id="apply-filters-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 mr-2">
                        Apply
                    </button>
                    <button id="close-filters-btn" class="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500">
                        Close
                    </button>
                </div>
            </div>
        </div>

        <!-- Top Stories Section -->
        <div class="mt-4">
            <h2 class="text-3xl font-bold mb-3 text-left">Latest News</h2>
            <div id="top-stories-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                <!-- Top stories will be dynamically populated here -->
            </div>
        </div>

    </div>

    <!-- Scripts -->
    <script>
        // Google Trends Widgets
        trends.embed.renderExploreWidgetTo(
            document.getElementById('trends-widget-container'),
            "RELATED_QUERIES",
            {
                "comparisonItem": [
                    {
                        "keyword": "School shooting",
                        "geo": "US",
                        "time": "today 12-m"
                    }
                ],
                "category": 0,
                "property": ""
            },
            {
                "exploreQuery": "geo=US&q=School%20shooting&hl=en&date=today%2012-m",
                "guestPath": "https://trends.google.com:443/trends/embed/"
            }
        );

        trends.embed.renderExploreWidgetTo(
            document.getElementById('trends-widget-container-2'),
            "TIMESERIES", 
            {
                "comparisonItem": [{"keyword":"School shooting","geo":"US","time":"today 12-m"}],
                "category": 0,
                "property": ""
            },
            {
                "exploreQuery":"geo=US&q=School%20shooting&hl=en&date=today%2012-m",
                "guestPath":"https://trends.google.com:443/trends/embed/"
            }
        );

        // SQL.js and Chart.js Script to Populate the Table and Charts

        // =========================
        // 1. Initialize SQL.js
        // =========================
        const config = {
            locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${filename}`
        };

        initSqlJs(config).then(function(SQL){
            // =========================
            // Database Setup
            // =========================
            const db = new SQL.Database();
            db.run("CREATE TABLE shootings (date TEXT, location TEXT, deaths TEXT, injuries TEXT, description TEXT);");

            const data = <%- JSON.stringify(data) %>; // Replace with your actual data

            data.forEach(item => {
                db.run(`INSERT INTO shootings (date, location, deaths, injuries, description) VALUES (?, ?, ?, ?, ?)`,
                    [item.date || 'N/A', item.location || 'N/A', item.deaths || 'N/A', item.injuries || 'N/A', item.description || 'N/A']);
            });

            // Query Data for Charts
            const deathsTrend = db.exec(`
                SELECT SUBSTR(date, -4) as year, SUM(CAST(deaths AS INT)) as deaths_count
                FROM shootings
                WHERE CAST(SUBSTR(date, -4) AS INT) >= 1900
                GROUP BY year
                ORDER BY year
            `);

            const years = deathsTrend[0].values.map(row => row[0]);
            const deathsPerYear = deathsTrend[0].values.map(row => row[1]);

            const deathsByStateQuery = db.exec(`
                SELECT location, SUM(CAST(deaths as INT)) as total_deaths
                FROM shootings
                WHERE CAST(SUBSTR(date, -4) AS INT) >= 1900
                GROUP BY location
            `);

            const stateDeathsMap = {};
            deathsByStateQuery[0].values.forEach(row => {
                const state = row[0].split(',').pop().trim();
                const deaths = row[1];
                stateDeathsMap[state] = (stateDeathsMap[state] || 0) + deaths;
            });

            const states = Object.keys(stateDeathsMap);
            const deathsByState = Object.values(stateDeathsMap);

            // =========================
            // Render Table
            // =========================
            const tableBody = document.getElementById('data-table');
            const showMoreBtn = document.getElementById('show-more-btn');
            let filteredData = data.slice();
            let displayedRows = 12;
            let showMore = true;

            function renderTable(filteredData) {
                tableBody.innerHTML = '';  // Clear the table
                document.getElementById('total-count').textContent = `${filteredData.length} records`;
                const rowsToShow = showMore ? filteredData.slice(0, displayedRows) : filteredData;

                rowsToShow.forEach(row => {
                    const tr = document.createElement('tr');

                    ['date', 'location', 'deaths', 'injuries', 'description'].forEach(key => {
                        const td = document.createElement('td');
                        td.className = "p-2 border";

                        if (key === 'location') {
                            const locationLink = `<a href="https://en.wikipedia.org/wiki/${encodeURIComponent(row[key])}" target="_blank" class="text-blue-500 hover:underline">${row[key]}</a>`;
                            td.innerHTML = locationLink || 'N/A';
                        } else if (key === 'description') {
                            td.innerHTML = row[key] || 'N/A';
                        } else {
                            td.innerText = row[key] === 'N/A' || !row[key] ? 0 : row[key];
                        }
                        tr.appendChild(td);
                    });

                    tableBody.appendChild(tr);
                });

                showMoreBtn.textContent = showMore ? ' Show more' : ' Show less';
                showMoreBtn.classList.toggle('hidden', filteredData.length <= displayedRows);
            }

            // Initial render with sorted data
            let sortedData = data.slice().sort((a, b) => new Date(b.date) - new Date(a.date));
            renderTable(sortedData);

            showMoreBtn.addEventListener('click', () => {
                showMore = !showMore;
                renderTable(filteredData);
            });

            // =========================
            // Filtering Logic
            // =========================
            const stateFilter = document.getElementById('filter-state');
            const yearFilter = document.getElementById('filter-year');
            const sortDateSelect = document.getElementById('sort-date-select');
            const sortDeathsCheckbox = document.getElementById('sort-deaths-checkbox');

            const uniqueStates = [...new Set(data.map(row => row.location.split(',').pop().trim()))];
            const uniqueYears = [...new Set(data.map(row => parseInt(row.date.match(/\b(19|20)\d{2}\b/))))]
                .filter(year => year >= 1900)
                .sort((a, b) => b - a);

            uniqueStates.forEach(state => {
                const option = document.createElement('option');
                option.value = state;
                option.textContent = state;
                stateFilter.appendChild(option);
            });

            uniqueYears.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearFilter.appendChild(option);
            });

            function applyFiltersAndSort() {
                filteredData = data.slice();

                const selectedState = stateFilter.value;
                const selectedYear = yearFilter.value;
                const sortByDeaths = sortDeathsCheckbox.checked;

                if (selectedState !== 'all') {
                    filteredData = filteredData.filter(row => row.location.includes(selectedState));
                }

                if (selectedYear !== 'all') {
                    filteredData = filteredData.filter(row => row.date.includes(selectedYear));
                } else {
                    // Exclude data before 1900
                    filteredData = filteredData.filter(row => {
                        const yearMatch = row.date.match(/\b(19|20)\d{2}\b/);
                        return yearMatch && parseInt(yearMatch[0]) >= 1900;
                    });
                }

                if (sortByDeaths) {
                    filteredData.sort((a, b) => parseInt(b.deaths) - parseInt(a.deaths));
                }

                displayedRows = 10;
                showMore = true;
                renderTable(filteredData);
            }

            stateFilter.addEventListener('change', applyFiltersAndSort);
            yearFilter.addEventListener('change', applyFiltersAndSort);
            sortDeathsCheckbox.addEventListener('change', applyFiltersAndSort);
            sortDateSelect.addEventListener('change', function() {
                const selectedValue = this.value;
                if (selectedValue === 'latest') {
                    filteredData.sort((a, b) => new Date(b.date) - new Date(a.date));
                } else if (selectedValue === 'oldest') {
                    filteredData.sort((a, b) => new Date(a.date) - new Date(b.date));
                }
                renderTable(filteredData);
            });

            // =========================
            // Render Charts
            // =========================
            const ctx1 = document.getElementById('deathsTrendChart').getContext('2d');
            const ctx2 = document.getElementById('deathsByStateChart').getContext('2d');

                    // Line chart for deaths over time
        const lineChart = new Chart(ctx1, {
            type: 'line',
            data: {
                labels: years,
                datasets: [{
                    label: 'Number of Deaths',
                    data: deathsPerYear,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: true,
                }]
            },
            options: {
                scales: { y: { beginAtZero: true } },
                plugins: {
                    zoom: {
                        zoom: {
                            enabled: true,
                            mode: 'x', // Enable zoom on x-axis
                        },
                        pan: {
                            enabled: true,
                            mode: 'x', // Allow panning on x-axis
                        }
                    }
                }
            }
        });

        // Bar chart for deaths by state
        const barChart = new Chart(ctx2, {
            type: 'bar',
            data: {
                labels: states,
                datasets: [{
                    label: 'Total Deaths by State',
                    data: deathsByState,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1,
                }]
            },
            options: {
                indexAxis: 'x',
                scales: { y: { beginAtZero: true } },
                plugins: {
                    zoom: {
                        zoom: {
                            enabled: true,
                            mode: 'x', // Enable zoom on x-axis
                        },
                        pan: {
                            enabled: true,
                            mode: 'x', // Allow panning on x-axis
                        }
                    }
                }
            }
        });
            // =========================
        // Chart Modal Functionality
        // =========================
        const chartModal = document.getElementById('chart-modal');
        const closeModal = document.getElementById('close-chart-modal');
        const modalChartCanvas = document.getElementById('modalChart').getContext('2d');
        let modalChartInstance;

        // Open modal and load the clicked chart in full screen with zoom enabled
        document.querySelectorAll('.clickable-chart').forEach(chartElement => {
            chartElement.addEventListener('click', function () {
                chartModal.classList.remove('hidden');
                const chartConfig = this.id === 'deathsTrendChart' ? lineChart.config : barChart.config;

                // Destroy the existing modal chart if it exists
                if (modalChartInstance) {
                    modalChartInstance.destroy();
                }

                // Create a new chart instance for the modal with zoom and pan enabled
                modalChartInstance = new Chart(modalChartCanvas, {
                    type: chartConfig.type,
                    data: chartConfig.data,
                    options: {
                        ...chartConfig.options,
                        plugins: {
                            zoom: {
                                zoom: {
                                    enabled: true,
                                    mode: 'x',
                                },
                                pan: {
                                    enabled: true,
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });
            });
        });

        // Close the chart modal
        closeModal.addEventListener('click', () => {
            chartModal.classList.add('hidden');
            if (modalChartInstance) {
                modalChartInstance.destroy();
            }
        });

            // =========================
            // Fetch Top Stories from API and Display
            // =========================
            async function fetchTopStories() {
                try {
                    const response = await fetch('/api/top-stories');
                    const data = await response.json();
                    displayTopStories(data);
                } catch (error) {
                    console.error("Error fetching top stories:", error);
                }
            }

            function displayTopStories(stories) {
                const container = document.getElementById('top-stories-container');
                container.innerHTML = '';
                const newsStory = stories.news_about_threat_school_shooting;
                if (Array.isArray(newsStory) && newsStory.length > 0) {
                    newsStory.forEach(story => {
                        const card = `
                        <div class="bg-white rounded-lg shadow-md overflow-hidden">
                            <img src="${story.thumbnail}" alt="${story.title}" class="w-full h-40 object-cover" />
                            <div class="p-4">
                                <h3 class="text-lg font-semibold">
                                    <a href="${story.link}" target="_blank" class="text-blue-600 hover:underline">
                                        ${story.title}
                                    </a>
                                </h3>
                                <p class="text-sm text-gray-500 mt-2">${story.source} - ${story.date}</p>
                            </div>
                        </div>
                        `;
                        container.insertAdjacentHTML('beforeend', card);
                    });
                } else {
                    container.innerHTML = '<p class="text-gray-600">No top stories available.</p>';
                }
        }

            // Fetch Top Stories on Page Load
            fetchTopStories();

            // =========================
            // Filters Modal Functionality
            // =========================
            // Elements
            const openFiltersBtn = document.getElementById('open-filters-btn');
            const filtersModal = document.getElementById('filters-modal');
            const closeFiltersBtn = document.getElementById('close-filters-btn');
            const applyFiltersBtn = document.getElementById('apply-filters-btn');

            // Filter controls in modal
            const stateFilterModal = document.getElementById('filter-state-modal');
            const yearFilterModal = document.getElementById('filter-year-modal');
            const sortDateSelectModal = document.getElementById('sort-date-select-modal');
            const sortDeathsCheckboxModal = document.getElementById('sort-deaths-checkbox-modal');

            // Event Listeners
            openFiltersBtn.addEventListener('click', () => {
                filtersModal.classList.remove('hidden');
                populateModalFilters();
            });

            closeFiltersBtn.addEventListener('click', () => {
                filtersModal.classList.add('hidden');
            });

            applyFiltersBtn.addEventListener('click', () => {
                // Sync the modal filters with the main filters
                stateFilter.value = stateFilterModal.value;
                yearFilter.value = yearFilterModal.value;
                sortDateSelect.value = sortDateSelectModal.value;
                sortDeathsCheckbox.checked = sortDeathsCheckboxModal.checked;

                applyFiltersAndSort();

                filtersModal.classList.add('hidden');
            });

            // Populate modal filters with the same options as the main filters
            function populateModalFilters() {
                // Populate State Filter
                stateFilterModal.innerHTML = stateFilter.innerHTML;

                // Populate Year Filter
                yearFilterModal.innerHTML = yearFilter.innerHTML;

                // Set current values
                stateFilterModal.value = stateFilter.value;
                yearFilterModal.value = yearFilter.value;
                sortDateSelectModal.value = sortDateSelect.value;
                sortDeathsCheckboxModal.checked = sortDeathsCheckbox.checked;
            }
        });
    </script>
</body>
</html>
