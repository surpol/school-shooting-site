<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Shootings Data & Charts</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js CDN for creating charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- SQL.js CDN for in-browser database -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/sql-wasm.js"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto mt-8 p-4">
        <h1 class="text-3xl font-bold text-center mb-6">USA School Shootings News</h1>
        <!-- Data Source Notice -->
        <div class="text-center text-sm mb-4">
            <p class="italic">Data source: 
                <a href="https://en.wikipedia.org/wiki/Lists_of_school_shootings_in_the_United_States" target="_blank" class="text-blue-500 underline">Wikipedia</a>
            </p>
        </div>

        <!-- Three-column layout: Filters, Table, Charts -->
        <div class="grid grid-cols-1 md:grid-cols-12 gap-4">
            <!-- First Column: Filters -->
            <div class="md:col-span-2 mb-6 bg-white p-4 h-fit">
                <h1 class="text-xl font-semibold mb-2"> Filters </h1>
                <!-- Filter by Year -->
                <div class="flex items-center mb-2">
                    <select id="filter-year" class="border p-1 w-full">
                        <option value="all">All years</option>
                    </select>
                </div>

                <!-- Filter by State -->
                <div class="mb-2">
                    <select id="filter-state" class="border p-1 w-full">
                        <option value="all">All states</option>
                    </select>
                </div>
                <!-- Sort by Date Dropdown -->
                <div class="mb-2 gap-2">
                    <select id="sort-date-select" class="border p-1 w-full">
                        <option value="latest">recent</option>
                        <option value="oldest">old</option>
                    </select>
                </div>
                <!-- Sort Controls -->
                <div class="mb-2 gap-2">
                    <label for="sort-deaths-checkbox">
                        <input type="checkbox" id="sort-deaths-checkbox" class="mr-1">Sort by death count
                    </label>
                </div>

                
            </div>

            <!-- Second Column: Table -->
            <div class="md:col-span-7">
                <h1 id="total-count" class="text-xl font-semibold mb-4">Total </h1>
                <div class="relative">
                    <div class="overflow-auto max-h-[calc(100vh-80px)]">
                        <table class="table-auto w-full text-left bg-white border border-gray-200">
                            <thead>
                                <tr class="bg-gray-200">
                                    <th class="p-2 border">Date</th>
                                    <th class="p-2 border">Location</th>
                                    <th class="p-2 border">Deaths</th>
                                    <th class="p-2 border">Injuries</th>
                                    <th class="p-2 border">Description</th>
                                </tr>
                            </thead>
                            <tbody id="data-table">
                                <!-- Rows will be dynamically populated -->
                            </tbody>
                        </table>
                    </div>
                    <!-- Show More/Show Less Button -->
                    <div class="sticky bottom-0 w-full flex justify-center p-4">
                        <button id="show-more-btn" class="p-2 bg-blue-500 text-white">Show more</button>
                    </div>
                </div>
            </div>
            
            

            <!-- Third Column: Charts -->
            <div class="md:col-span-3 p-3">
                <!-- Line Chart for Deaths Over Time -->
                <h1 class="text-2xl font-semibold mb-4 text-left">Data Visuals</h1>
                <canvas id="deathsTrendChart" class="clickable-chart cursor-pointer bg-white mb-2"></canvas>

                <!-- Bar Chart for Deaths by State -->
                <canvas id="deathsByStateChart" class="clickable-chart cursor-pointer bg-white"></canvas>

                <!-- Google Trends Embedding -->
                <h1 class="text-2xl font-semibold mb-4 mt-4 text-left">Search Trends (google.com) </h1>
                <div id="trends-widget-container" class="p-1"></div>
                <div id="trends-widget-container-2" class="p-1"></div>
            </div>

            <!-- Modal for displaying enlarged charts -->
            <div id="chart-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center">
                <div class="bg-white p-6 w-4/5">
                    <h2 class="text-xl font-bold mb-4">Chart View</h2>
                    <canvas id="modalChart"></canvas>
                    <button id="close-chart-modal" class="mt-4 p-2 bg-red-500 text-white rounded-md">Close</button>
                </div>
            </div>
        </div>

        <!-- Top Stories Section -->
        <div class="mt-4">
            <h2 class="text-3xl font-bold mb-6 text-left">Latest News</h2>
            <div id="top-stories-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                <!-- Top stories will be dynamically populated here -->
            </div>
        </div>
    </div>

    <!-- Google Trends Script (Load Once) -->
    <script src="https://ssl.gstatic.com/trends_nrtr/3826_RC01/embed_loader.js"></script> 
    <script>
        // Render both Google Trends widgets
        trends.embed.renderExploreWidgetTo(
            document.getElementById('trends-widget-container'),
            "RELATED_QUERIES", 
            {
                "comparisonItem": [{"keyword":"School shooting","geo":"US","time":"now 7-d"}],
                "category": 0,
                "property": ""
            },
            {
                "exploreQuery":"date=now%207-d&geo=US&q=School%20shooting&hl=en",
                "guestPath":"https://trends.google.com:443/trends/embed/"
            }
        );

        trends.embed.renderExploreWidgetTo(
            document.getElementById('trends-widget-container-2'),
            "TIMESERIES", 
            {
                "comparisonItem": [{"keyword":"School shooting","geo":"US","time":"today 12-m"}],
                "category": 0,
                "property": ""
            },
            {
                "exploreQuery":"geo=US&q=School%20shooting&hl=en&date=today 12-m",
                "guestPath":"https://trends.google.com:443/trends/embed/"
            }
        );
    </script>
    <script>
        // SQL.js and Chart.js Script to Populate the Table and Charts

        // =========================
        // 1. Initialize SQL.js
        // =========================
        const config = {
            locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${filename}`
        };

        initSqlJs(config).then(function(SQL){
            // =========================
            // Database Setup
            // =========================
            const db = new SQL.Database();
            db.run("CREATE TABLE shootings (date TEXT, location TEXT, deaths TEXT, injuries TEXT, description TEXT);");

            const data = <%- JSON.stringify(data) %>; // Original data from the server

            data.forEach(item => {
                db.run(`INSERT INTO shootings (date, location, deaths, injuries, description) VALUES (?, ?, ?, ?, ?)`,
                    [item.date || 'N/A', item.location || 'N/A', item.deaths || 'N/A', item.injuries || 'N/A', item.description || 'N/A']);
            });

            // Query Data for Charts
            const deathsTrend = db.exec(`
                SELECT SUBSTR(date, -4) as year, SUM(CAST(deaths AS INT)) as deaths_count
                FROM shootings
                WHERE year IS NOT NULL
                GROUP BY year
                ORDER BY year
            `);

            const years = deathsTrend[0].values.map(row => row[0]);
            const deathsPerYear = deathsTrend[0].values.map(row => row[1]);
            const deathsByStateQuery = db.exec(`
                SELECT location, SUM(CAST(deaths as INT)) as total_deaths
                FROM shootings
                GROUP BY location
            `);
            
            const stateDeathsMap = {};
            deathsByStateQuery[0].values.forEach(row => {
                const state = row[0].split(',').pop().trim();
                const deaths = row[1];
                stateDeathsMap[state] = (stateDeathsMap[state] || 0) + deaths;
            });

            const states = Object.keys(stateDeathsMap);
            const deathsByState = Object.values(stateDeathsMap);

            // =========================
            // Render Table
            // =========================
            const tableBody = document.getElementById('data-table');
            const showMoreBtn = document.getElementById('show-more-btn');
            let filteredData = data.slice();
            let displayedRows = 10;
            let showMore = true;

            function renderTable(filteredData) {
                tableBody.innerHTML = '';  // Clear the table
                document.getElementById('total-count').textContent = `Total: ${filteredData.length} records`;
                const rowsToShow = showMore ? filteredData.slice(0, displayedRows) : filteredData;

                rowsToShow.forEach(row => {
                    const tr = document.createElement('tr');

                    ['date', 'location', 'deaths', 'injuries', 'description'].forEach(key => {
                        const td = document.createElement('td');
                        td.className = "p-2 border";

                        if (key === 'location') {
                            const locationLink = `<a href="https://en.wikipedia.org/wiki/${encodeURIComponent(row[key])}" target="_blank">${row[key]}</a>`;
                            td.innerHTML = locationLink || 'N/A';
                        } else if (key === 'description') {
                            td.innerHTML = row[key] || 'N/A';
                        } else {
                            td.innerText = row[key] === 'N/A' || !row[key] ? 0 : row[key];
                        }
                        tr.appendChild(td);
                    });

                    tableBody.appendChild(tr);
                });

                showMoreBtn.textContent = showMore ? 'Show More' : 'Show Less';
                showMoreBtn.classList.toggle('hidden', filteredData.length <= displayedRows);
            }

            // Initial render with sorted data
            let sortedData = data.slice().sort((a, b) => new Date(b.date) - new Date(a.date));
            renderTable(sortedData);

            showMoreBtn.addEventListener('click', () => {
                showMore = !showMore;
                renderTable(filteredData);
            });

            // =========================
            // Filtering Logic
            // =========================
            const stateFilter = document.getElementById('filter-state');
            const yearFilter = document.getElementById('filter-year');

            const uniqueStates = [...new Set(data.map(row => row.location.split(',').pop().trim()))];
            const uniqueYears = [...new Set(data.map(row => parseInt(row.date.match(/\b(19|20)\d{2}\b/))))].sort((a, b) => b - a);

            uniqueStates.forEach(state => {
                const option = document.createElement('option');
                option.value = state;
                option.textContent = state;
                stateFilter.appendChild(option);
            });

            uniqueYears.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearFilter.appendChild(option);
            });

            function applyFiltersAndSort() {
                filteredData = data.slice();

                const selectedState = stateFilter.value;
                const selectedYear = yearFilter.value;
                const sortByDeaths = document.getElementById('sort-deaths-checkbox').checked;

                if (selectedState !== 'all') {
                    filteredData = filteredData.filter(row => row.location.includes(selectedState));
                }

                if (selectedYear !== 'all') {
                    filteredData = filteredData.filter(row => row.date.includes(selectedYear));
                }

                if (sortByDeaths) {
                    filteredData.sort((a, b) => parseInt(b.deaths) - parseInt(a.deaths));
                }

                displayedRows = 10;
                showMore = true;
                renderTable(filteredData);
            }

            stateFilter.addEventListener('change', applyFiltersAndSort);
            yearFilter.addEventListener('change', applyFiltersAndSort);
            document.getElementById('sort-deaths-checkbox').addEventListener('change', applyFiltersAndSort);
            document.getElementById('sort-date-select').addEventListener('change', function() {
                const selectedValue = this.value;
                if (selectedValue === 'latest') {
                    filteredData.sort((a, b) => new Date(b.date) - new Date(a.date));
                } else if (selectedValue === 'oldest') {
                    filteredData.sort((a, b) => new Date(a.date) - new Date(b.date));
                }
                renderTable(filteredData);
            });

            // =========================
            // Render Charts
            // =========================
            const ctx1 = document.getElementById('deathsTrendChart').getContext('2d');
            const ctx2 = document.getElementById('deathsByStateChart').getContext('2d');

            const lineChart = new Chart(ctx1, {
                type: 'line',
                data: {
                    labels: years,
                    datasets: [{
                        label: 'Number of Deaths',
                        data: deathsPerYear,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        fill: true
                    }]
                },
                options: {
                    scales: { y: { beginAtZero: true } }
                }
            });

            const barChart = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: states,
                    datasets: [{
                        label: 'Total Deaths by State',
                        data: deathsByState,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'x',
                    scales: { y: { beginAtZero: true } }
                }
            });

            // =========================
            // Chart Modal Functionality
            // =========================
            const chartModal = document.getElementById('chart-modal');
            const closeModal = document.getElementById('close-chart-modal');
            const modalChartCanvas = document.getElementById('modalChart').getContext('2d');
            let modalChartInstance;

            function openModalWithChart(chartConfig) {
                chartModal.classList.remove('hidden');
                if (modalChartInstance) {
                    modalChartInstance.destroy();
                }
                modalChartInstance = new Chart(modalChartCanvas, chartConfig);
            }

            closeModal.addEventListener('click', () => {
                chartModal.classList.add('hidden');
                if (modalChartInstance) {
                    modalChartInstance.destroy();
                }
            });

            document.querySelectorAll('.clickable-chart').forEach(chartElement => {
                chartElement.addEventListener('click', function() {
                    const chart = this.id === 'deathsTrendChart' ? lineChart : barChart;
                    const chartConfig = chart.config;
                    openModalWithChart(chartConfig);
                });
            });

            // =========================
            // Fetch Top Stories from API and Display
            // =========================
            async function fetchTopStories() {
                try {
                    const response = await fetch('/api/top-stories');
                    const data = await response.json();
                    console.log("Top Stories API response:", data);  // Log the entire response
                    displayTopStories(data);
                } catch (error) {
                    console.error("Error fetching top stories:", error);
                }
            }



            function displayTopStories(data) {
                const container = document.getElementById('top-stories-container');
                container.innerHTML = ''; // Clear existing content

                // Check if the 'carousel' property exists and is an array
                if (data.carousel && Array.isArray(data.carousel)) {
                    const stories = data.carousel;

                    stories.forEach(story => {
                        const card = `
                        <div class="bg-white overflow-hidden max-w-xs mx-auto">
                            <img src="${story.thumbnail}" alt="${story.title}" class="w-full h-32 object-cover">
                            <div class="p-4">
                                <h3 class="text-md">
                                    <a href="${story.link}" target="_blank" class="text-blue-600">${story.title}</a>
                                </h3>
                                <p class="text-sm mt-1 text-gray-600">${story.source} - ${story.date}</p>
                            </div>
                        </div>

                        `;
                        container.insertAdjacentHTML('beforeend', card);
                    });
                } else {
                    // Handle the case when there are no stories or the structure is incorrect
                    container.innerHTML = `<p class="text-red-500">No top stories available.</p>`;
                }
            }


            // Fetch Top Stories on Page Load
            fetchTopStories();
        });
    </script>
</body>
</html>
